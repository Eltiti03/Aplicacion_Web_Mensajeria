- Algunos comandos y metodos

INICIALIZAR PROYECTOS:

- para inicializar node:

npm init (crea el package.json)

- para inicializar express

npm install -E express

- para instalar e iniciailzar TypeScript

1. npm install typescript --save-dev
2. npx tsc --init (crea el tsconfig.json)
3. npm install -D @types/express
4. npm install -D ts-node-dev --> Este paquete te permite ejecutar TypeScript directo y reinicia el servidor autom√°ticamente cuando cambias c√≥digo.
5. luego en el "scripts": { } de tu package.js debes colocar [ "dev": "ts-node-dev --respawn --transpile-only src/app.ts" ]

CONFIGURACION DE TS EN ts.config.json:

- strict: true ‚Üí activa todas las comprobaciones estrictas de TypeScript (mejor detecci√≥n de errores).
- forceConsistentCasingInFileNames: true ‚Üí obliga a usar el mismo estilo de may√∫sculas/min√∫sculas en los nombres de archivo.
- rootDir: "./src/" ‚Üí indica la carpeta donde est√° el c√≥digo fuente en TypeScript.
- outDir: "./dist/" ‚Üí carpeta de salida donde se guardar√°n los archivos compilados en JavaScript.
- noUnusedLocals: true ‚Üí muestra error si declaras variables locales que no usas.
- lib: ["ES2024"] ‚Üí habilita las librer√≠as del est√°ndar JavaScript hasta ES2024 (√∫ltimas funciones).
- target: "ES2024" ‚Üí convierte tu c√≥digo a JavaScript moderno compatible con Node.js actual.
- moduleResolution: "nodenext" ‚Üí controla c√≥mo se resuelven los m√≥dulos (import/export) en Node.js.
- module: "nodenext" ‚Üí especifica el sistema de m√≥dulos; recomendado para proyectos modernos en Node.js con ESModules.
- esModuleInterop: true ‚Üí permite usar import express from "express"; en lugar de import * as express from "express";.
- skipLibCheck: true ‚Üí ignora errores en los archivos de tipos (.d.ts), acelera la compilaci√≥n.
- resolveJsonModule: true ‚Üí permite importar archivos .json directamente (import data from "./data.json";).
- noImplicitAny: true ‚Üí obliga a declarar siempre el tipo si TypeScript no lo puede inferir.
- strictNullChecks: true ‚Üí obliga a tratar null y undefined como valores distintos (evita muchos errores).
- allowSyntheticDefaultImports: true ‚Üí permite usar import x from "lib" aunque la librer√≠a no tenga export default.
- declaration: true ‚Üí genera archivos .d.ts (√∫til si vas a publicar tu paquete en npm).
- incremental: true ‚Üí hace compilaciones m√°s r√°pidas guardando cach√© de la √∫ltima compilaci√≥n.
- sourceMap: true ‚Üí genera mapas de c√≥digo (.map) para depurar TypeScript en el navegador o VSCode.
- types: ["node", "express"] ‚Üí indica qu√© definiciones de tipos se cargan autom√°ticamente.


MATAR UN PUERTO:

Busca el proceso que usa el puerto:

netstat -ano | findstr :(Numero del puerto)

Mata el proceso con:

taskkill /PID (Numero del puerto) /F


METODOS PARA EL MANEJO DE LOS SERVIDORES EXPRESS:


el REQ:


req.method ‚Üí el verbo HTTP (GET, POST, PUT, DELETE, etc.)

req.url ‚Üí la URL que pidi√≥ el cliente

req.headers ‚Üí encabezados de la petici√≥n (User-Agent, Content-Type, Authorization, etc.)

req.query ‚Üí par√°metros en la query string (?name=Julian&age=25)

req.params ‚Üí par√°metros en la ruta (/users/:id)

req.body ‚Üí el cuerpo de la petici√≥n (si env√≠as JSON o formulario)


el REST:


res.send() ‚Üí enviar texto, JSON o HTML

res.json() ‚Üí enviar un objeto como JSON

res.status() ‚Üí establecer un c√≥digo de estado (200, 404, 500, etc.)

res.end() ‚Üí cerrar la respuesta

res.setHeader() ‚Üí modificar encabezados de la respuesta


METODOS DE LOS ARRAYS:


.find(cb) ‚Üí devuelve el primer elemento que cumpla la condici√≥n o undefined.

.findIndex(cb) ‚Üí devuelve la posici√≥n (√≠ndice) del primer elemento que cumpla la condici√≥n, o -1 si no existe.

.includes(valor) ‚Üí devuelve true/false si el valor est√° en el array.

.some(cb) ‚Üí true si al menos un elemento cumple la condici√≥n.

.every(cb) ‚Üí true si todos los elementos cumplen la condici√≥n.

.filter(cb) ‚Üí devuelve un nuevo array con todos los elementos que cumplan la condici√≥n.

.map(cb) ‚Üí devuelve un nuevo array transformando cada elemento.

.flat() ‚Üí aplana arrays anidados en un solo nivel.

.flatMap(cb) ‚Üí combina .map() + .flat().

.reduce(cb, valorInicial) ‚Üí acumula los valores en un √∫nico resultado (suma, promedio, etc.).

.reduceRight(cb, valorInicial) ‚Üí igual que reduce, pero de derecha a izquierda.

.push(valor) ‚Üí agrega al final del array.

.pop() ‚Üí elimina el √∫ltimo elemento.

.unshift(valor) ‚Üí agrega al inicio.

.shift() ‚Üí elimina el primero.

.splice(indice, cantidad, ...elementos) ‚Üí agrega o elimina elementos en una posici√≥n espec√≠fica.

.slice(inicio, fin) ‚Üí devuelve una copia parcial del array (sin modificar el original).

.sort(cb) ‚Üí ordena el array en su lugar (cuidado, modifica el original).

.reverse() ‚Üí invierte el orden del array (tambi√©n lo modifica).

.forEach(cb) ‚Üí recorre el array y ejecuta algo en cada elemento (no devuelve nada).

.entries() ‚Üí devuelve pares [√≠ndice, valor].

.keys() ‚Üí devuelve un iterador con los √≠ndices.

.values() ‚Üí devuelve un iterador con los valores.




VALIDACIONES CON ZOD:


Creaci√≥n de esquemas b√°sicos

z.string()     // cadena de texto
z.number()     // n√∫mero (puede ser int o float)
z.boolean()    // true/false
z.date()       // fecha (Date object)
z.null()       // valor null
z.undefined()  // valor undefined
z.any()        // acepta cualquier cosa (no recomendado salvo casos especiales)
z.unknown()    // acepta cualquier valor pero sin operaciones posteriores
z.never()      // nunca v√°lido


M√©todos de validaci√≥n para string

z.string().min(3)                           // longitud m√≠nima
z.string().max(20)                          // longitud m√°xima
z.string().length(10)                       // longitud exacta
z.string().email()                          // debe ser email v√°lido
z.string().url()                            // debe ser URL v√°lida
z.string().uuid()                           // UUID v√°lido
z.string().regex(/^[a-z]+$/)                // validar con regex
z.string().startsWith("abc")                // debe iniciar con "abc"
z.string().endsWith("xyz")                  // debe terminar con "xyz"
z.string().datetime()                       // fecha/hora ISO string
nonempty("El t√≠tulo es obligatorio")        // valida que no est√© vac√≠o


M√©todos de validaci√≥n para number

z.number().int()          // debe ser entero
z.number().positive()     // > 0
z.number().nonnegative()  // >= 0
z.number().negative()     // < 0
z.number().nonpositive()  // <= 0
z.number().gt(10)         // > 10
z.number().gte(10)        // >= 10
z.number().lt(100)        // < 100
z.number().lte(100)       // <= 100
z.number().finite()       // no infinito
z.number().safe()         // debe ser un n√∫mero seguro de JS


Arrays

z.array(z.string())             // array de strings
z.array(z.number()).nonempty()  // array de n√∫meros que no puede estar vac√≠o
z.array(z.string()).min(2)      // m√≠nimo 2 elementos
z.array(z.string()).max(5)      // m√°ximo 5 elementos


Objetos

z.object({
  name: z.string(),
  age: z.number().int()
})

Extras:

.strict()   // no permite claves extra
.partial()  // hace que todos los campos sean opcionales
.pick({ key: true }) // selecciona ciertos campos
.omit({ key: true }) // omite ciertos campos
.extend({ newField: z.string() }) // a√±ade nuevos campos
.merge(z.object({})) // combina con otro objeto


Uniones y combinaciones:

z.union([z.string(), z.number()])   // puede ser string o number
z.enum(["A", "B", "C"])             // valores permitidos
z.literal("fixedValue")             // valor fijo
z.nativeEnum(MyEnum)                // usar enums de TS
z.intersection(z.string(), z.string().min(3)) // combina reglas


Opcionales y valores nulos:

z.string().optional()   // string o undefined
z.string().nullable()   // string o null
z.string().nullish()    // string o null o undefined


Transformaciones y refinamientos:

z.string().transform(val => val.toUpperCase()) // transforma valor
z.number().refine(val => val % 2 === 0, {
  message: "Debe ser par"
}) // validaci√≥n custom


M√©todos de validaci√≥n de datos:

schema.parse(data)       // valida y lanza error si es inv√°lido
schema.safeParse(data)   // valida y devuelve { success, data | error }
schema.check(data)       // booleano: true si pasa validaci√≥n


M√©todos para reutilizaci√≥n:

z.preprocess(val => Number(val), z.number()) // transforma antes de validar
z.lazy(() => schema)   // para validaciones recursivas
z.record(z.string())   // objeto con claves din√°micas
z.map(z.string(), z.number()) // mapa de clave-valor
z.set(z.string())      // conjunto de strings



COMANDOS ESCENSIALES DOCKER:


#Se usa "sudo" para obtener permisos de super usuario, si no es necesario, no se usa


Conexi√≥n y edici√≥n


ssh usuario@IP ‚Üí Conectarse a un servidor remoto por SSH.

sudo nano archivo ‚Üí Abrir el editor nano con permisos de administrador para editar archivos (ej: docker-compose.yml).


üîë Linux b√°sico

pwd	Muestra la ruta del directorio actual.

ls -la	Lista archivos (incluyendo ocultos y permisos).

cd <ruta>	Cambia de directorio.

mkdir <nombre>	Crea una carpeta.

rm -rf <carpeta>	Elimina carpeta y su contenido (‚ö†Ô∏è cuidado).

cp origen destino	Copia archivos o carpetas.

mv origen destino	Mueve o renombra archivos.

cat archivo	Muestra el contenido de un archivo.

tail -f archivo.log	Muestra en vivo las √∫ltimas l√≠neas de un log.

top o htop	Muestra procesos y consumo de CPU/RAM.

sudo apt update && sudo apt upgrade -y	Actualiza el sistema (Ubuntu/Debian).


üê≥ Docker b√°sico


sudo docker ps ‚Üí Lista los contenedores en ejecuci√≥n.

sudo docker ps -a ‚Üí Lista todos los contenedores (ejecut√°ndose o detenidos).

sudo docker stop <nombre> ‚Üí Detiene un contenedor en ejecuci√≥n.

sudo docker start <nombre_contenedor>

sudo docker rm <nombre> ‚Üí Elimina un contenedor detenido.

sudo docker images ‚Üí Muestra las im√°genes descargadas en tu m√°quina.

sudo docker rmi <imagen> ‚Üí Elimina una imagen (si no est√° en uso).


‚öôÔ∏è Docker Compose


sudo docker compose up -d ‚Üí Levanta todos los servicios definidos en docker-compose.yml en modo detached (en segundo plano).

sudo docker compose down ‚Üí Detiene y elimina los contenedores y la red creada por Docker Compose.

sudo docker compose down -v ‚Üí Lo mismo que arriba, pero tambi√©n elimina vol√∫menes (datos persistentes como bases de datos).

sudo docker compose build	Construye las im√°genes seg√∫n el docker-compose.yml.

sudo docker compose restart	Reinicia los servicios definidos en el compose.

sudo docker compose logs -f	Muestra logs en tiempo real de todos los servicios.

sudo docker compose exec <servicio> bash	Entra a un contenedor de un servicio (ej: mariadb).


üßπ Limpieza


sudo docker system prune ‚Üí Elimina contenedores detenidos, redes no usadas e im√°genes hu√©rfanas (no borra vol√∫menes).

sudo docker system prune -a --volumes ‚Üí Limpieza total: elimina todo lo no usado, incluidas im√°genes y vol√∫menes (borra datos persistentes).

sudo docker rm -f $(sudo docker ps -aq)	Detiene y elimina todos los contenedores.

sudo docker rmi -f $(sudo docker images -q)	Borra todas las im√°genes.

sudo docker volume prune	Elimina vol√∫menes no usados.

sudo docker network prune	Elimina redes no usadas.




üê≥ Docker + sudo / permisos de usuario



1Ô∏è‚É£ Revisar contenedores
sudo docker ps


Lista los contenedores en ejecuci√≥n.

Con sudo se obtienen permisos para hablar con el daemon de Docker.

2Ô∏è‚É£ Permitir usar Docker sin sudo
sudo usermod -aG docker colmotica


usermod ‚Üí modifica usuarios.

-aG docker ‚Üí agrega al usuario al grupo docker.

Despu√©s de esto, hay que cerrar sesi√≥n y volver a entrar.

‚úÖ Luego puedes ejecutar:

docker ps


üëâ sin sudo.

3Ô∏è‚É£ Volver al modo seguro (solo con sudo)
sudo gpasswd -d colmotica docker


gpasswd -d ‚Üí elimina al usuario del grupo.

Despu√©s de cerrar sesi√≥n y volver a entrar:

docker ps ‚Üí dar√° permission denied.

sudo docker ps ‚Üí funcionar√° normalmente.




üê≥ Tutorial: Crear una base de datos independiente en MariaDB y asignar permisos



1Ô∏è‚É£ Entrar al contenedor MariaDB como root


- sudo docker exec -it mariadb_container mariadb -u root -p


docker exec -it ‚Üí ejecuta un comando dentro de un contenedor en modo interactivo.

mariadb -u root -p ‚Üí abre el cliente MariaDB con usuario root.

****** Te pedir√° la contrase√±a que configuraste en docker-compose.yml (rootpassword).



2Ô∏è‚É£ Crear una base de datos independiente


- CREATE DATABASE (NOMBRE DE LA BASE DE DATOS);


Esto crea una base independiente de cualquier otra que exista (BD_JULIAN).


3Ô∏è‚É£ Crear o asignar permisos a un usuario existente


- GRANT ALL ON SPIDERMAN_DB.* TO 'JULIANG313'@'%';


GRANT ALL PRIVILEGES ‚Üí le da control total sobre esa base al usuario.

SPIDERMAN_DB.* ‚Üí limita los privilegios solo a la base SPIDERMAN_DB.

FLUSH PRIVILEGES ‚Üí actualiza los permisos sin reiniciar MariaDB.


# OTROS COMANDOS


( GRANT ALL ON *.* TO 'JULIANG313'@'%'; --> Funciona para dar permisos, pero no le permite otorgar permisos a otros usuarios.

GRANT ALL PRIVILEGES ON *.* TO 'JULIANG313'@'%' WITH GRANT OPTION; --> otorgar todos los privilegios globales y la capacidad de dar permisos a otros (como root) en MariaDB/MySQL

REVOKE ALL PRIVILEGES, GRANT OPTION ON *.* FROM 'JULIANG313'@'%'; --> quitar todos los privilegios globales)


FLUSH PRIVILEGES; --> aplica los cambios inmediatamente




4Ô∏è‚É£ Salir del cliente

- EXIT;



INICIALIZAR FRONT-END:


- npm create vite@latest

- npm install @vitejs/plugin-react -E

- npm install react react-dom -E

- npm run dev --> para correr la app